package main

import (
	"fmt"
	"sort"
)

type producto struct {
	nombre   string
	cantidad int
	precio   int
}
type listaProductos []producto

var lProductos listaProductos
var lMinima listaProductos

const existenciaMinima int = 10 //la existencia mínima es el número mínimo debajo de el cual se deben tomar eventuales desiciones

func (l *listaProductos) agregarProducto(nombre string, cantidad int, precio int) {
	i := l.buscarProducto(nombre)
	if i != -1 {
		(*l)[i].cantidad += cantidad
		(*l)[i].precio = precio
	} else {
		*l = append(*l, producto{nombre: nombre, cantidad: cantidad, precio: precio})
		//fmt.Println(*l)
	}
	// modificar el código para que cuando se agregue un producto, si este ya se encuentra, incrementar la cantidad
	// de elementos del producto y eventualmente el precio si es que es diferente

}

func (l *listaProductos) buscarProducto(nombre string) int { //el retorno es el índice del producto encontrado y -1 si no existe
	var result = -1
	var i int
	for i = 0; i < len(*l); i++ {
		if (*l)[i].nombre == nombre {
			result = i
		}
	}
	return result
}

func (l *listaProductos) borrarProducto(s int) {
	*l = append((*l)[:s], (*l)[s+1:]...)
}

func (l *listaProductos) venderProducto(nombre string, cant int) {
	var prod = l.buscarProducto(nombre)
	if prod != -1 && cant > 0 {
		if (*l)[prod].cantidad >= cant {
			(*l)[prod].cantidad = (*l)[prod].cantidad - cant
		} else {
			fmt.Println("No se puede mayor cantidad de productos que los que hay en existencia")
		}
		//modificar para que cuando no haya existencia de cantidad de productos, el producto se elimine de "la lista"
	}
	if (*l)[prod].cantidad == 0 {
		l.borrarProducto(prod)
	}

}
func llenarDatos() {
	lProductos.agregarProducto("arroz", 15, 2500)
	lProductos.agregarProducto("frijoles", 4, 2000)
	lProductos.agregarProducto("leche", 8, 1200)
	lProductos.agregarProducto("café", 12, 4500)
}

func (l *listaProductos) listarProductosMínimos() listaProductos {
	// debe retornar una nueva lista con productos con existencia mínima
	for i := 0; i < len(*l); i++ {
		if (*l)[i].cantidad <= existenciaMinima {
			lMinima = append(lMinima, (*l)[i])
		}
	}
	return lMinima
}

func main() {
	llenarDatos()
	fmt.Println(lProductos)
	lProductos.venderProducto("arroz", 4)
	fmt.Println(lProductos)
	lProductos.agregarProducto("azucar", 20, 1500)
	fmt.Println(lProductos)
	lProductos.venderProducto("frijoles", 4)
	lProductos.venderProducto("azucar", 15)
	lProductos.venderProducto("café", 6)
	//lProductos.venderProducto("leche", 10)
------------------------------------------------------------------------CÓDIGO DEL EJERCICIO----------------------------------------------------------------------------
	fmt.Println("Lista de productos sin ordenar: ", lProductos)
	sort.SliceStable(lProductos, func(i, j int) bool {      //Usando la función de la librería sort, para ordenar por precio de mayor a menor
		return lProductos[i].precio > lProductos[j].precio
	})
	fmt.Println("Lista de productos ordenados por precio: ", lProductos)
}

Resultado: 
Lista de productos sin ordenar:  [{arroz 11 2500} {leche 8 1200} {café 6 4500} {azucar 5 1500}]
Lista de productos ordenados por precio:  [{café 6 4500} {arroz 11 2500} {azucar 5 1500} {leche 8 1200}]


